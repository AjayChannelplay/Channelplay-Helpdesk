import React, { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useToast } from "@/hooks/use-toast";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Table, TableBody, TableCaption, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { queryClient, apiRequest } from "@/lib/queryClient";
import { AlertCircle, PlusCircle, Pencil, Trash2, Inbox, Mail, Users, Server, CheckCircle2 } from "lucide-react";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Switch } from "@/components/ui/switch";
import { Separator } from "@/components/ui/separator";

import { Desk } from "@shared/schema";

// Remove import for Separator and delete this comment afterwards

// Define schemas for form validation
const createDeskSchema = z.object({
  name: z
    .string()
    .min(2, { message: "Desk name must be at least 2 characters long" })
    .max(50, { message: "Desk name must be less than 50 characters" }),
  email: z
    .string()
    .email({ message: "Please enter a valid email address" })
    .refine(email => email.endsWith('@helpdesk.1office.in'), {
      message: "Email must end with @helpdesk.1office.in"
    }),
  forwardingEmail: z
    .string()
    .email({ message: "Please enter a valid email address" })
    .optional()
    .nullable()
    .or(z.literal('')),
  
  // SMTP Configuration
  useDirectEmail: z
    .boolean()
    .default(false),
  smtpHost: z
    .string()
    .min(1, { message: "SMTP host is required when direct email is enabled" })
    .optional()
    .nullable(),
  smtpPort: z
    .string()
    .min(1, { message: "SMTP port is required when direct email is enabled" })
    .optional()
    .nullable(),
  smtpUser: z
    .string()
    .min(1, { message: "SMTP username is required when direct email is enabled" })
    .optional()
    .nullable(),
  smtpPassword: z
    .string()
    .min(1, { message: "SMTP password is required when direct email is enabled" })
    .optional()
    .nullable(),
  smtpSecure: z
    .boolean()
    .default(false),
  smtpFromName: z
    .string()
    .optional()
    .nullable(),
});

const updateDeskSchema = z.object({
  name: z
    .string()
    .min(2, { message: "Desk name must be at least 2 characters long" })
    .max(50, { message: "Desk name must be less than 50 characters" }),
  email: z
    .string()
    .email({ message: "Please enter a valid email address" })
    .refine(email => email.endsWith('@helpdesk.1office.in'), {
      message: "Email must end with @helpdesk.1office.in"
    }),
  forwardingEmail: z
    .string()
    .email({ message: "Please enter a valid email address" })
    .optional()
    .nullable()
    .or(z.literal('')),
    
  // SMTP Configuration
  useDirectEmail: z
    .boolean()
    .default(false),
  smtpHost: z
    .string()
    .min(1, { message: "SMTP host is required when direct email is enabled" })
    .optional()
    .nullable(),
  smtpPort: z
    .string()
    .min(1, { message: "SMTP port is required when direct email is enabled" })
    .optional()
    .nullable(),
  smtpUser: z
    .string()
    .min(1, { message: "SMTP username is required when direct email is enabled" })
    .optional()
    .nullable(),
  smtpPassword: z
    .string()
    .min(1, { message: "SMTP password is required when direct email is enabled" })
    .optional()
    .nullable(),
  smtpSecure: z
    .boolean()
    .default(false),
  smtpFromName: z
    .string()
    .optional()
    .nullable(),
});

// Define types
type CreateDeskFormData = z.infer<typeof createDeskSchema>;
type UpdateDeskFormData = z.infer<typeof updateDeskSchema>;

type User = {
  id: number;
  username: string;
  name: string;
  email: string;
  role: string;
};

export default function DeskManagement() {
  const { toast } = useToast();
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [isAssignUserDialogOpen, setIsAssignUserDialogOpen] = useState(false);
  const [selectedDesk, setSelectedDesk] = useState<Desk | null>(null);
  
  // Fetch all desks
  const { data: desks = [], isLoading, isError, refetch } = useQuery<Desk[]>({
    queryKey: ['/api/desks'],
    queryFn: async () => {
      const res = await apiRequest('GET', '/api/desks');
      return await res.json();
    }
  });

  // Fetch all users (for assignment)
  const { data: users = [] } = useQuery<User[]>({
    queryKey: ['/api/users'],
    queryFn: async () => {
      const res = await apiRequest('GET', '/api/users');
      return await res.json();
    }
  });

  // Fetch desk users for a specific desk
  const { data: deskUsers = [], refetch: refetchDeskUsers } = useQuery<User[]>({
    queryKey: ['/api/desks/users', selectedDesk?.id],
    queryFn: async () => {
      if (!selectedDesk) return [];
      // We need to get users assigned to this desk through desk assignments
      const res = await apiRequest('GET', `/api/desks/${selectedDesk.id}/users`);
      return await res.json();
    },
    enabled: !!selectedDesk
  });
  
  // Create Desk form
  const createForm = useForm<CreateDeskFormData>({
    resolver: zodResolver(createDeskSchema),
    defaultValues: {
      name: '',
      email: '',
      forwardingEmail: '',
      // SMTP Configuration
      useDirectEmail: false,
      smtpHost: '',
      smtpPort: '587',
      smtpUser: '',
      smtpPassword: '',
      smtpSecure: false,
      smtpFromName: ''
    }
  });
  
  // Update Desk form
  const updateForm = useForm<UpdateDeskFormData>({
    resolver: zodResolver(updateDeskSchema),
    defaultValues: {
      name: '',
      email: '',
      forwardingEmail: '',
      // SMTP Configuration
      useDirectEmail: false,
      smtpHost: '',
      smtpPort: '587',
      smtpUser: '',
      smtpPassword: '',
      smtpSecure: false,
      smtpFromName: ''
    }
  });

  // Form for user assignment
  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);
  
  // Create desk mutation
  const createDeskMutation = useMutation({
    mutationFn: async (data: CreateDeskFormData) => {
      const res = await apiRequest('POST', '/api/desks', data);
      return await res.json();
    },
    onSuccess: () => {
      toast({
        title: "Desk created",
        description: "The desk has been created successfully.",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/desks'] });
      setIsCreateDialogOpen(false);
      createForm.reset({
        name: '',
        email: '',
        forwardingEmail: '',
        // Reset SMTP Configuration
        useDirectEmail: false,
        smtpHost: '',
        smtpPort: '587',
        smtpUser: '',
        smtpPassword: '',
        smtpSecure: false,
        smtpFromName: ''
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error creating desk",
        description: error.message,
        variant: "destructive",
      });
    }
  });
  
  // Update desk mutation
  const updateDeskMutation = useMutation({
    mutationFn: async (data: UpdateDeskFormData & { id: number }) => {
      const { id, ...updateData } = data;
      const res = await apiRequest('PATCH', `/api/desks/${id}`, updateData);
      return await res.json();
    },
    onSuccess: () => {
      toast({
        title: "Desk updated",
        description: "The desk has been updated successfully.",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/desks'] });
      setIsEditDialogOpen(false);
      updateForm.reset();
    },
    onError: (error: Error) => {
      toast({
        title: "Error updating desk",
        description: error.message,
        variant: "destructive",
      });
    }
  });
  
  // Delete desk mutation
  const deleteDeskMutation = useMutation({
    mutationFn: async (id: number) => {
      const res = await apiRequest('DELETE', `/api/desks/${id}`);
      return await res.json();
    },
    onSuccess: () => {
      toast({
        title: "Desk deleted",
        description: "The desk has been deleted successfully.",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/desks'] });
      setIsDeleteDialogOpen(false);
    },
    onError: (error: Error) => {
      toast({
        title: "Error deleting desk",
        description: error.message,
        variant: "destructive",
      });
    }
  });

  // Assign user to desk
  const assignUserMutation = useMutation({
    mutationFn: async ({ deskId, userId }: { deskId: number, userId: number }) => {
      const res = await apiRequest('POST', `/api/desk-assignments`, { userId, deskId });
      return await res.json();
    },
    onSuccess: () => {
      toast({
        title: "User assigned",
        description: "The user has been assigned to the desk successfully.",
      });
      refetchDeskUsers();
      setIsAssignUserDialogOpen(false);
      setSelectedUserId(null);
    },
    onError: (error: Error) => {
      toast({
        title: "Error assigning user",
        description: error.message,
        variant: "destructive",
      });
    }
  });

  // Remove user from desk
  const removeUserMutation = useMutation({
    mutationFn: async ({ deskId, userId }: { deskId: number, userId: number }) => {
      const res = await apiRequest('DELETE', `/api/desk-assignments`, { deskId, userId });
      return await res.json();
    },
    onSuccess: () => {
      toast({
        title: "User removed",
        description: "The user has been removed from the desk successfully.",
      });
      refetchDeskUsers();
    },
    onError: (error: Error) => {
      toast({
        title: "Error removing user",
        description: error.message,
        variant: "destructive",
      });
    }
  });
  
  // Handle form submissions
  const onCreateSubmit = (data: CreateDeskFormData) => {
    createDeskMutation.mutate(data);
  };
  
  const onUpdateSubmit = (data: UpdateDeskFormData) => {
    if (!selectedDesk) return;
    updateDeskMutation.mutate({ ...data, id: selectedDesk.id });
  };

  const handleAssignUser = () => {
    if (!selectedDesk || !selectedUserId) return;
    assignUserMutation.mutate({ deskId: selectedDesk.id, userId: selectedUserId });
  };

  const handleRemoveUser = (userId: number) => {
    if (!selectedDesk) return;
    removeUserMutation.mutate({ deskId: selectedDesk.id, userId });
  };
  
  const handleEditDesk = (desk: Desk) => {
    setSelectedDesk(desk);
    updateForm.reset({
      name: desk.name,
      email: desk.email,
      forwardingEmail: desk.forwardingEmail || '',
      // SMTP Configuration
      useDirectEmail: desk.useDirectEmail || false,
      smtpHost: desk.smtpHost || '',
      smtpPort: desk.smtpPort || '587',
      smtpUser: desk.smtpUser || '',
      smtpPassword: '', // Don't populate password in the form for security reasons
      smtpSecure: desk.smtpSecure || false,
      smtpFromName: desk.smtpFromName || ''
    });
    setIsEditDialogOpen(true);
  };

  const handleManageUsers = (desk: Desk) => {
    setSelectedDesk(desk);
    setIsAssignUserDialogOpen(true);
  };
  
  const handleDeleteDesk = (desk: Desk) => {
    setSelectedDesk(desk);
    setIsDeleteDialogOpen(true);
  };
  
  const confirmDeleteDesk = () => {
    if (selectedDesk) {
      deleteDeskMutation.mutate(selectedDesk.id);
    }
  };
  
  return (
    <Card>
      <CardHeader className="flex flex-row items-center justify-between">
        <div>
          <CardTitle className="text-2xl font-bold">Desk Management</CardTitle>
          <CardDescription>Manage support desks and their email addresses</CardDescription>
        </div>
        <Button onClick={() => setIsCreateDialogOpen(true)}>
          <PlusCircle className="mr-2 h-4 w-4" />
          Add Desk
        </Button>
      </CardHeader>
      <CardContent>
        {isLoading ? (
          <div className="flex justify-center p-6">Loading desks...</div>
        ) : isError ? (
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>Error</AlertTitle>
            <AlertDescription>Failed to load desks. Please try again.</AlertDescription>
          </Alert>
        ) : desks.length === 0 ? (
          <div className="text-center p-6 text-muted-foreground">No desks found.</div>
        ) : (
          <Table>
            <TableCaption>A list of all support desks in the system.</TableCaption>
            <TableHeader>
              <TableRow>
                <TableHead>ID</TableHead>
                <TableHead>Name</TableHead>
                <TableHead>Email</TableHead>
                <TableHead>Forwarding Email</TableHead>
                <TableHead>Email Delivery</TableHead>
                <TableHead>Created At</TableHead>
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {desks.map((desk) => (
                <TableRow key={desk.id}>
                  <TableCell>{desk.id}</TableCell>
                  <TableCell className="max-w-[150px] truncate" title={desk.name}>{desk.name}</TableCell>
                  <TableCell className="max-w-[150px] truncate" title={desk.email}>{desk.email}</TableCell>
                  <TableCell className="max-w-[150px] truncate" title={desk.forwardingEmail || ""}>{desk.forwardingEmail || ""}</TableCell>
                  <TableCell>
                    {desk.useDirectEmail ? (
                      <div className="flex items-center">
                        <div className="h-2 w-2 rounded-full bg-green-500 mr-2" />
                        <span className="text-xs">Direct SMTP</span>
                        {desk.smtpHost && (
                          <div className="ml-2 text-xs text-muted-foreground">
                            ({desk.smtpHost})
                          </div>
                        )}
                      </div>
                    ) : (
                      <div className="flex items-center">
                        <div className="h-2 w-2 rounded-full bg-amber-500 mr-2" />
                        <span className="text-xs">Mailgun</span>
                      </div>
                    )}
                  </TableCell>
                  <TableCell>{new Date(desk.createdAt).toLocaleDateString()}</TableCell>
                  <TableCell className="text-right whitespace-nowrap">
                    <Button variant="ghost" size="sm" onClick={() => handleManageUsers(desk)}>
                      <Users className="h-4 w-4 text-blue-500" />
                    </Button>
                    <Button variant="ghost" size="sm" onClick={() => handleEditDesk(desk)}>
                      <Pencil className="h-4 w-4" />
                    </Button>
                    <Button variant="ghost" size="sm" onClick={() => handleDeleteDesk(desk)}>
                      <Trash2 className="h-4 w-4 text-red-500" />
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        )}
      </CardContent>

      {/* Create Desk Dialog */}
      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>Create New Desk</DialogTitle>
            <DialogDescription>
              Add a new support desk with a dedicated email address.
            </DialogDescription>
          </DialogHeader>
          
          <Form {...createForm}>
            <form onSubmit={createForm.handleSubmit(onCreateSubmit)} className="space-y-6">
              <div className="space-y-4">
                <FormField
                  control={createForm.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Desk Name</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter desk name" {...field} />
                      </FormControl>
                      <FormDescription>
                        A descriptive name for this support desk.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={createForm.control}
                  name="email"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Email Address</FormLabel>
                      <FormControl>
                        <Input 
                          type="text" 
                          placeholder="support" 
                          {...field} 
                        />
                      </FormControl>
                      <FormDescription>
                        This email will be used for authentication (SMTP and IMAP) and as the from address for all helpdesk emails.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <Separator className="my-6" />
                <h3 className="text-lg font-medium mb-4">Email Configuration</h3>
                <div className="space-y-6">
                  <FormField
                    control={createForm.control}
                    name="smtpHost"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>SMTP Host</FormLabel>
                        <FormControl>
                          <Input 
                            placeholder="smtp.example.com" 
                            {...field} 
                            value={field.value || ''}
                          />
                        </FormControl>
                        <FormDescription>
                          The hostname of your SMTP server (e.g., smtp.gmail.com).
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <div className="grid grid-cols-2 gap-4">
                    <FormField
                      control={createForm.control}
                      name="smtpPort"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>SMTP Port</FormLabel>
                          <FormControl>
                            <Input 
                              placeholder="587" 
                              {...field} 
                              value={field.value || ''}
                            />
                          </FormControl>
                          <FormDescription>
                            Common ports: 587 (TLS) or 465 (SSL)
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={createForm.control}
                      name="smtpSecure"
                      render={({ field }) => (
                        <FormItem className="flex flex-col justify-end h-full pb-2">
                          <div className="flex items-center space-x-2">
                            <FormLabel>Use SSL/TLS</FormLabel>
                            <FormControl>
                              <Switch
                                checked={field.value}
                                onCheckedChange={field.onChange}
                              />
                            </FormControl>
                          </div>
                          <FormDescription>
                            Enable for secure connections
                          </FormDescription>
                        </FormItem>
                      )}
                    />
                  </div>

                  <FormField
                    control={createForm.control}
                    name="smtpUser"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>SMTP Username</FormLabel>
                        <FormControl>
                          <Input 
                            placeholder="username@example.com" 
                            {...field} 
                            value={field.value || ''}
                          />
                        </FormControl>
                        <FormDescription>
                          Usually the full email address
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={createForm.control}
                    name="smtpPassword"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>SMTP Password</FormLabel>
                        <FormControl>
                          <Input 
                            type="password" 
                            placeholder="••••••••" 
                            value={field.value || ''}
                            onChange={(e) => field.onChange(e.target.value)}
                            onBlur={field.onBlur}
                            ref={field.ref}
                            name={field.name}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={createForm.control}
                    name="smtpFromName"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>From Name</FormLabel>
                        <FormControl>
                          <Input 
                            placeholder="Support Team" 
                            {...field} 
                            value={field.value || ''}
                          />
                        </FormControl>
                        <FormDescription>
                          The name that will appear in the From field of emails.
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                {/* Hidden field to always use direct email */}
                <input type="hidden" {...createForm.register("useDirectEmail")} value="true" />
              </div>
              
              <DialogFooter>
                <Button 
                  type="submit" 
                  disabled={createDeskMutation.isPending}
                >
                  {createDeskMutation.isPending ? "Creating..." : "Create Desk"}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>

      {/* Edit Desk Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>Edit Desk</DialogTitle>
            <DialogDescription>
              Update the desk information.
            </DialogDescription>
          </DialogHeader>
          
          <Form {...updateForm}>
            <form onSubmit={updateForm.handleSubmit(onUpdateSubmit)} className="space-y-6">
              <div className="space-y-4">
                <FormField
                  control={updateForm.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Desk Name</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter desk name" {...field} />
                      </FormControl>
                      <FormDescription>
                        A descriptive name for this support desk.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={updateForm.control}
                  name="email"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Email Address</FormLabel>
                      <FormControl>
                        <Input 
                          type="text" 
                          placeholder="support" 
                          {...field} 
                        />
                      </FormControl>
                      <FormDescription>
                        This email will be used for authentication (SMTP and IMAP) and as the from address for all helpdesk emails.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <Separator className="my-6" />
                <h3 className="text-lg font-medium mb-4">Email Configuration</h3>
                <div className="space-y-6">
                  <FormField
                    control={updateForm.control}
                    name="smtpHost"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>SMTP Host</FormLabel>
                        <FormControl>
                          <Input 
                            placeholder="smtp.example.com" 
                            {...field} 
                            value={field.value || ''}
                          />
                        </FormControl>
                        <FormDescription>
                          The hostname of your SMTP server (e.g., smtp.gmail.com).
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <div className="grid grid-cols-2 gap-4">
                    <FormField
                      control={updateForm.control}
                      name="smtpPort"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>SMTP Port</FormLabel>
                          <FormControl>
                            <Input 
                              placeholder="587" 
                              {...field} 
                              value={field.value || ''}
                            />
                          </FormControl>
                          <FormDescription>
                            Common ports: 587 (TLS) or 465 (SSL)
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={updateForm.control}
                      name="smtpSecure"
                      render={({ field }) => (
                        <FormItem className="flex flex-col justify-end h-full pb-2">
                          <div className="flex items-center space-x-2">
                            <FormLabel>Use SSL/TLS</FormLabel>
                            <FormControl>
                              <Switch
                                checked={field.value}
                                onCheckedChange={field.onChange}
                              />
                            </FormControl>
                          </div>
                          <FormDescription>
                            Enable for secure connections
                          </FormDescription>
                        </FormItem>
                      )}
                    />
                  </div>

                  <FormField
                    control={updateForm.control}
                    name="smtpUser"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>SMTP Username</FormLabel>
                        <FormControl>
                          <Input 
                            placeholder="username@example.com" 
                            {...field} 
                            value={field.value || ''}
                          />
                        </FormControl>
                        <FormDescription>
                          Usually the full email address
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={updateForm.control}
                    name="smtpPassword"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>SMTP Password</FormLabel>
                        <FormControl>
                          <Input 
                            type="password" 
                            placeholder="Leave blank to keep current password" 
                            value={field.value || ''}
                            onChange={(e) => {
                              // Only update if value changed to avoid wiping out saved password
                              if (e.target.value) {
                                field.onChange(e.target.value);
                              }
                            }}
                            onBlur={field.onBlur}
                            ref={field.ref}
                            name={field.name}
                          />
                        </FormControl>
                        <FormDescription>
                          Leave empty to keep the existing password.
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={updateForm.control}
                    name="smtpFromName"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>From Name</FormLabel>
                        <FormControl>
                          <Input 
                            placeholder="Support Team" 
                            {...field} 
                            value={field.value || ''}
                          />
                        </FormControl>
                        <FormDescription>
                          The name that will appear in the From field of emails.
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                {/* Hidden field to always use direct email */}
                <input type="hidden" {...updateForm.register("useDirectEmail")} value="true" />
              </div>
              
              <DialogFooter>
                <Button 
                  type="submit" 
                  disabled={updateDeskMutation.isPending}
                >
                  {updateDeskMutation.isPending ? "Updating..." : "Update Desk"}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>

      {/* Delete Desk Dialog */}
      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Confirm Delete</DialogTitle>
            <DialogDescription>
              Are you sure you want to delete this desk? This action cannot be undone.
            </DialogDescription>
          </DialogHeader>
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>Warning</AlertTitle>
            <AlertDescription>
              Deleting this desk will remove all associated assignments. Tickets will be preserved but may become inaccessible.
            </AlertDescription>
          </Alert>
          <DialogFooter>
            <Button 
              variant="outline" 
              onClick={() => setIsDeleteDialogOpen(false)}
            >
              Cancel
            </Button>
            <Button 
              variant="destructive" 
              onClick={confirmDeleteDesk}
              disabled={deleteDeskMutation.isPending}
            >
              {deleteDeskMutation.isPending ? "Deleting..." : "Delete"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Assign Users Dialog */}
      <Dialog open={isAssignUserDialogOpen} onOpenChange={setIsAssignUserDialogOpen}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle className="line-clamp-2">Manage Users for <span className="font-semibold">{selectedDesk?.name}</span></DialogTitle>
            <DialogDescription>
              Assign users to this desk or remove existing assignments.
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            <div className="flex items-end gap-4">
              <div className="flex-1">
                <div className="mb-2">
                  <label className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">Assign User</label>
                </div>
                <div className="flex gap-2">
                  <select 
                    className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"  
                    value={selectedUserId || ''}
                    onChange={(e) => setSelectedUserId(e.target.value ? parseInt(e.target.value) : null)}
                  >
                    <option value="">Select a user</option>
                    {users.map(user => (
                      // Only show users not already assigned to this desk
                      !deskUsers.some(du => du.id === user.id) && (
                        <option key={user.id} value={user.id}>
                          {user.name} ({user.username})
                        </option>
                      )
                    ))}
                  </select>
                  <Button 
                    onClick={handleAssignUser} 
                    disabled={!selectedUserId || assignUserMutation.isPending}
                  >
                    Assign
                  </Button>
                </div>
              </div>
            </div>

            <div>
              <h3 className="text-lg font-medium mb-2">Current Assignments</h3>
              {deskUsers.length === 0 ? (
                <p className="text-muted-foreground">No users assigned to this desk.</p>
              ) : (
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Name</TableHead>
                      <TableHead>Username</TableHead>
                      <TableHead>Email</TableHead>
                      <TableHead>Role</TableHead>
                      <TableHead className="text-right">Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {deskUsers.map((user) => (
                      <TableRow key={user.id}>
                        <TableCell>{user.name}</TableCell>
                        <TableCell>{user.username}</TableCell>
                        <TableCell>{user.email}</TableCell>
                        <TableCell>
                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${user.role === 'admin' ? 'bg-red-100 text-red-800' : 'bg-blue-100 text-blue-800'}`}>
                            {user.role === 'admin' ? 'Administrator' : 'Agent'}
                          </span>
                        </TableCell>
                        <TableCell className="text-right">
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            onClick={() => handleRemoveUser(user.id)}
                            disabled={removeUserMutation.isPending}
                          >
                            <Trash2 className="h-4 w-4 text-red-500" />
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              )}
            </div>
          </div>

          <DialogFooter>
            <Button 
              variant="outline" 
              onClick={() => setIsAssignUserDialogOpen(false)}
            >
              Close
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </Card>
  );
}
