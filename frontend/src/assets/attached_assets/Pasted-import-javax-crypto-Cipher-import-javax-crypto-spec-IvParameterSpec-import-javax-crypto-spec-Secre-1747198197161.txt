import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.security.SecureRandom;
import java.util.Base64;
import java.util.Arrays;
 
public class AESCipherUtil {
 
    private static final String ALGORITHM = "AES";
    private static final String TRANSFORMATION = "AES/CBC/PKCS5Padding";
    private static final int IV_SIZE = 16; // AES block size
    private static final String secretKey = 'channelplay_help'; // Same key used in Java
 
    /**
     * Encrypts the input string using AES with a random IV prepended to the output.
     */
    public static String encrypt(String emailId) throws Exception {
        byte[] clean = emailId.getBytes(StandardCharsets.UTF_8);
 
        // Generate random IV
        byte[] iv = new byte[IV_SIZE];
        new SecureRandom().nextBytes(iv);
        IvParameterSpec ivSpec = new IvParameterSpec(iv);
 
        // Prepare key
        SecretKeySpec secretKeySpec = getSecretKey(this.secretKey);
 
        // Encrypt
        Cipher cipher = Cipher.getInstance(TRANSFORMATION);
        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, ivSpec);
        byte[] encrypted = cipher.doFinal(clean);
 
        // Concatenate IV and encrypted data
        byte[] combined = new byte[iv.length + encrypted.length];
        System.arraycopy(iv, 0, combined, 0, iv.length);
        System.arraycopy(encrypted, 0, combined, iv.length, encrypted.length);
 
        return Base64.getEncoder().encodeToString(combined);
    }
 
    /**
     * Decrypts the string assuming the first 16 bytes are the IV.
     */
    public static String decrypt(String encryptedData, String secretKey) throws Exception {
        byte[] combined = Base64.getDecoder().decode(encryptedData);
 
        // Extract IV and ciphertext
        byte[] iv = Arrays.copyOfRange(combined, 0, IV_SIZE);
        byte[] encryptedBytes = Arrays.copyOfRange(combined, IV_SIZE, combined.length);
        IvParameterSpec ivSpec = new IvParameterSpec(iv);
 
        // Prepare key
        SecretKeySpec secretKeySpec = getSecretKey(secretKey);
 
        // Decrypt
        Cipher cipher = Cipher.getInstance(TRANSFORMATION);
        cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, ivSpec);
        byte[] decrypted = cipher.doFinal(encryptedBytes);
 
        return new String(decrypted, StandardCharsets.UTF_8);
    }
 
    /**
     * Prepares a 16-byte AES key from the secret string (padded or trimmed).
     */
    private static SecretKeySpec getSecretKey(String key) {
        byte[] keyBytes = Arrays.copyOf(key.getBytes(StandardCharsets.UTF_8), 16); // 128-bit key
        return new SecretKeySpec(keyBytes, ALGORITHM);
    }
 
    // Optional: Demo main method
    public static void main(String[] args) throws Exception {
        String email = "harshit@channelplay.in";
        String key = "MySecretAESKey!"; // Should be exactly 16 chars for AES-128
 
        String encrypted = encrypt(email, key);
        System.out.println("Encrypted: " + encrypted);
 
        String decrypted = decrypt(encrypted, key);
        System.out.println("Decrypted: " + decrypted);
    }
}